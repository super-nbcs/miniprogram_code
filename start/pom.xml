<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>miniprogram-code</artifactId>
        <groupId>com.zfw</groupId>
        <version>1.0.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>start</artifactId>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.zfw</groupId>
            <artifactId>core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.zfw</groupId>
            <artifactId>wx</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
    <!--mvn clean install -Dmaven.test.skip=true-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.1.1.RELEASE</version>
                <configuration>
                    <fork>true</fork> <!-- 如果没有该配置，devtools不会生效 -->
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <warName>${project.artifactId}</warName>
                </configuration>
            </plugin>
            <!-- Docker maven plugin -->
            <!--mvn clean package -Dmaven.test.skip=true docker:build-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <dockerHost>http://192.168.1.17:2375</dockerHost>
                    <!--镜像名字:版本-->
                    <imageName>${docker.image.prefix}/${project.artifactId}:${project.version}</imageName>
                    <!--依赖基础镜像-->
                    <baseImage>huigou/jdk8</baseImage>
                    <!--作者姓名-->
                    <maintainer>zfw</maintainer>
                    <workdir>${docker.dir}</workdir>
                    <cmd>["java","-Dfile.encoding=utf-8", "-jar", "${docker.dir}${project.build.finalName}.jar"]</cmd>
                    <!-- 指定Dockerfile 文件的位置 上面的配置和下Dockerfile里面的一样 二者只能选一 -->
                    <!--<dockerDirectory>${project.basedir}/src/main/resources/docker</dockerDirectory>-->
                    <resources>
                        <resource>
                            <targetPath>${docker.dir}</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <!-- Docker maven plugin -->
        </plugins>
        <finalName>${project.artifactId}</finalName>
    </build>


</project>
